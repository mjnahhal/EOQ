# A mixed integer programming model for inventory replenishment planning for seasonal demand with discrete delivery times
# R software is needed to run the model
# The data frame df_weeks contains the input data. You can use the same data found in the paper, or just use your own data

d=df_weeks$forecasting
sigma=df_weeks$sigma

H=5 # Inventory Holding Cost
S=125 # Ordering costs

z=1.645 # service level (95%)

 
df_weeks$Expected_costs=0

for (ijk in 1:35) # dynamic calculations until the week 33
{

  
  if (ijk==1)
  { 
    Po=752
    PO=752 
  } else {
     d=df_weeks$forecasting[ijk:50]
     sigma=df_weeks$sigma[ijk:50]
     Po=df_weeks2$inventory[1]
     PO=df_weeks2$inventory[1]
  }


T=length(d)

SIG=matrix(0,nrow=T,ncol=T)
for(i in 1:T)
  for (j in i:T)
    SIG[i,j]=sqrt(sum(sigma[i:j]^2))


D=matrix(0,nrow=T,ncol=T)
for(i in 1:T)
  for (j in i:T)
    D[i,j]=sum(d[i:j])

#########

KK=sum(Po>D[1,] + z*SIG[1,]) # initial period

if(KK>=1)
{
  Po=Po-D[1,KK] # expected Residual inventory

  C=0.5*KK/52*H*D[1,KK]+KK/52*H*Po
  
  d=d[(KK+1):length(d)]
  T=length(d)
  
  sigma=sigma[(KK+1):length(sigma)]
  
  SIG=matrix(0,nrow=T,ncol=T)
  for(i in 1:T)
    for (j in i:T)
      SIG[i,j]=sqrt(sum(sigma[i:j]^2))
  
  D=matrix(0,nrow=T,ncol=T)
  for(i in 1:T)
    for (j in i:T)
      D[i,j]=sum(d[i:j])
  
} else
  C=0

############

I=matrix(0,nrow=T,ncol=T)
for(i in 1:T)
  for (j in i:T)
    I[i,j]= 0.5*((j-i)+1)/52*H*(sum(d[i:j]))

Safety_stock_cost=matrix(0,nrow=T,ncol=T)
SS=matrix(0,nrow=T,ncol=T)
for(i in 1:T)
  for (j in i:T)
  {
    SS[i,j]=round(z*SIG[i,j],digits = 0)
    Safety_stock_cost[i,j]=H*(j-i+1)/52*SS[i,j] 
  }

f=matrix(0,nrow=T,ncol=T)
for(i in 1:T)
  for (j in i:T)
    f[i,j]=I[i,j]+Safety_stock_cost[i,j]

wi_o=matrix(0,nrow=T,ncol=T+1)
Q_o=matrix(0,nrow=T,ncol=T+1)
OF_o=matrix(0,nrow=T,ncol=T+1)

# Dynamic Programming
for (j in 2:(T+1))
{
  wi_o[1,j]=1
  OF_o[1,j]=f[1,j-1]+S
  
}

for (o in 2:T)
{
  for (j in 2:(T+1))
  OF_o[o,j]=100000000
  
  for (j in (o+1): (T+1))
  {
    for (i in o: (j-1))
    {
      if(OF_o[o-1,i]+f[i,j-1]+S < OF_o[o,j] )
      {
        wi_o[o,j] = i

        OF_o[o,j] = OF_o[o-1,i]+f[i,j-1]+S
      }
    }
  }
}

print("Total Costs")
print(min(OF_o[,T+1])+C)
df_weeks$Expected_costs[ijk]=min(OF_o[,T+1])+C

n=which.min(OF_o[,T+1])
nn=order(1:n,decreasing = T)

xi=1:n # initial definition
Costs=1:n


Costs[nn[1]]= OF_o[nn[1],T+1] # Costs without C
xi[nn[1]]=wi_o[nn[1],T+1]

for (j in 2:n)
{

Costs[nn[j]]=OF_o[nn[j],xi[nn[j-1]]]
xi[nn[j]]=wi_o[nn[j],xi[nn[j-1]]]

Costs[nn[j]]=OF_o[nn[j],xi[nn[j-1]]]
xi[nn[j]]=wi_o[nn[j],xi[nn[j-1]]] 
}

xj=c(xi[2:n]-1,T) # neglecting KK and ijk

print("Number of Lots")
print(n)
print("Weeks Assignment")
print("Weeks Start")
print(xi+KK+ijk-1)
print("Weeks End")
print(xj+KK+ijk-1)

print("Safety Stock")
for (j in 1:n)
{
  print(SS[xi[j],xj[j]])
}

j=1
print("Lot Sizes")
print(D[ xi[j],xj[j] ] + SS[xi[j],xj[j]]  -  Po  )

df_weeks2=df_weeks[ijk:nrow(df_weeks),]

df_weeks2$Q=0
df_weeks2$Q[xi[j]+KK]=D[ xi[j],xj[j] ] + SS[xi[j],xj[j]]  -  Po

if(ijk==1)
{
  df_weeks$EOQ=0
} else
  df_weeks$EOQ[ijk:nrow(df_weeks)]=0

df_weeks$EOQ[xi[j]+KK+ijk-1]=D[ xi[j],xj[j] ] + SS[xi[j],xj[j]]  -  Po # fixed


for (j in 2:n)
{
  print(D[ xi[j],xj[j] ] + SS[xi[j],xj[j]]  -  SS[xi[j-1],xj[j-1]]  )
  
  df_weeks2$Q[xi[j]+KK]=D[ xi[j],xj[j] ] + SS[xi[j],xj[j]]  -  SS[xi[j-1],xj[j-1]]
  
  df_weeks$EOQ[xi[j]+KK+ijk-1]=D[ xi[j],xj[j] ] + SS[xi[j],xj[j]]  -  SS[xi[j-1],xj[j-1]]
}

df_weeks2$inventory=PO

df_weeks2$inventory=df_weeks2$inventory-cumsum(df_weeks2$Weekly_Demand)+cumsum(df_weeks2$Q)

}

df_weeks$Final_inventory=752

df_weeks$Final_inventory=df_weeks$Final_inventory-cumsum(df_weeks$Weekly_Demand)+cumsum(df_weeks$EOQ)


plot(df_weeks$week,df_weeks$Final_inventory, col=(df_weeks$Final_inventory>0)+2, 
     xlab = "Week", type="b",lwd=2, pch=(df_weeks$Final_inventory>0)+14, 
     ylab = "Inventory Size")
abline(v = ijk, lty=2, lwd=3)

x=df_weeks$EOQ
x[x==0] <- NA
plot(df_weeks$week,x,  
     xlab = "Week", type="h",lwd=2, col="blue", ylim = c(0, max(x, na.rm = T)+10),
     ylab = "Lot Size")
abline(v = ijk, lty=2, lwd=3)

mean(x,na.rm = T)
sum(x>1, na.rm=T)

#Total Costs
sum(df_weeks$Final_inventory)*H/52+S*sum(x>1, na.rm=T)


